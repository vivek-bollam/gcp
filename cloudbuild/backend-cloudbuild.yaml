steps:
  # 1. Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['ci']
    dir: 'backend'
  # 2. Run unit tests
  - name: 'gcr.io/cloud-builders/npm'
    args: ['test']
    dir: 'backend'
  # 3. Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$_AR_URI/backend:$COMMIT_SHA'
      - '.'
    dir: 'backend'
  # 4. Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$_AR_URI/backend:$COMMIT_SHA'
  # 5. Dummy step to reference gcp-key volume
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'ls /workspace/key.json'
    volumes:
      - name: 'gcp-key'
        path: '/workspace/key.json'
    secretEnv: ['GCP_KEY_JSON']
  # 6. Scan image with Trivy
  - name: 'aquasec/trivy:0.45.1'
    args:
      - 'image'
      - '--exit-code'
      - '1'
      - '--no-progress'
      - '--scanners'
      - 'vuln'
      - '--severity'
      - 'HIGH,CRITICAL'
      - '--ignorefile'
      - '/workspace/backend/.trivyignore'
      - '$_AR_URI/backend:$COMMIT_SHA'
    dir: 'backend'
    env:
      - 'GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json'
    volumes:
      - name: 'gcp-key'
        path: '/workspace/key.json'
    secretEnv: ['GCP_KEY_JSON']
  # 7. Update secret with commit SHA
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "GIT_COMMIT_SHA=$COMMIT_SHA" | gcloud secrets versions add git-commit-sha --data-file=-
    secretEnv: ['GCP_PROJECT']
  # 8. Debug environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "DEBUG: Listing environment variables"
        env
        echo "DEBUG: COMMIT_SHA is $COMMIT_SHA"
        echo "DEBUG: Image is $_AR_URI/backend:$COMMIT_SHA"
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'
    secretEnv: ['GCP_PROJECT']
  # 9. Deploy to GKE (using kubectl)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        echo "DEBUG: Commit SHA: $COMMIT_SHA"
        echo "DEBUG: Image: $_AR_URI/backend:$COMMIT_SHA"
        if [ -z "$COMMIT_SHA" ]; then echo "ERROR: COMMIT_SHA is empty"; exit 1; fi
        gcloud container clusters get-credentials sample-autopilot --region=us-central1 --project=my-gke-project-473809
        kubectl set image deployment/backend backend=$_AR_URI/backend:$COMMIT_SHA --namespace=default --record
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'
substitutions:
  _AR_URI: us-central1-docker.pkg.dev/my-gke-project-473809/my-repo
  _COMMIT_SHA: $COMMIT_SHA
options:
  logging: CLOUD_LOGGING_ONLY
availableSecrets:
  secretManager:
    - versionName: projects/my-gke-project-473809/secrets/project-id/versions/latest
      env: 'GCP_PROJECT'
    - versionName: projects/my-gke-project-473809/secrets/cloudbuild-sa-key/versions/latest
      env: 'GCP_KEY_JSON'
images:
  - '$_AR_URI/backend:$COMMIT_SHA'